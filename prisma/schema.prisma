// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  diaryUser     DiaryUser[]
  article       Article[]
  account       Account[]
  session       Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Diary {
  id            Int @id @default(autoincrement())
  title         String
  diaryDesign   DiaryDesign @relation(fields: [diaryDesignId], references: [id])
  diaryDesignId Int
  peopleCount   Int @map("numberOfPeople")
  rule          String
  articles      Article[]
  diaryUsers    DiaryUser[]
  isExchange    Boolean @default(true)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model DiaryDesign {
  id            Int @id @default(autoincrement())
  source        String
  diary         Diary[]
}

//intermediate table (Diary to User)
model DiaryUser {
  @@id          ([diaryId,userId])
  diary         Diary @relation(fields: [diaryId], references: [id])
  diaryId       Int
  user          User @relation(fields: [userId], references: [id])
  userId        String
  isCreate      Boolean @default(false)
}

model Article {
  id            Int @id @default(autoincrement())
  content       String
  diary         Diary @relation(fields: [diaryId], references: [id])
  diaryId       Int @unique
  user          User @relation(fields: [userId], references: [id])
  userId        String @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}